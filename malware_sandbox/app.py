import os
import hashlib
import time
import subprocess
import psutil
from flask import Flask, request, render_template, redirect, url_for
from werkzeug.utils import secure_filename

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = 'uploads'
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)

# ----- Analysis Functions -----
def get_hashes(file_path):
    hashes = {}
    with open(file_path, 'rb') as f:
        data = f.read()
        hashes['MD5'] = hashlib.md5(data).hexdigest()
        hashes['SHA1'] = hashlib.sha1(data).hexdigest()
        hashes['SHA256'] = hashlib.sha256(data).hexdigest()
    return hashes

def scan_strings(file_path):
    suspicious_keywords = ['CreateRemoteThread', 'VirtualAlloc', 'cmd.exe', 'powershell', 'socket', 'WinExec']
    with open(file_path, 'rb') as f:
        content = f.read().decode('latin-1', errors='ignore')
    found = [s for s in suspicious_keywords if s in content]
    return found

def static_analysis(file_path):
    hashes = get_hashes(file_path)
    strings = scan_strings(file_path)
    return {
        'hashes': hashes,
        'suspicious_strings': strings
    }

def execute_sample(file_path):
    try:
        proc = subprocess.Popen([file_path], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        time.sleep(5)
        proc.terminate()
        return True
    except Exception as e:
        return False

def monitor_behavior(duration=10):
    initial = set(p.name() for p in psutil.process_iter())
    time.sleep(duration)
    final = set(p.name() for p in psutil.process_iter())
    new_processes = final - initial
    return list(new_processes)

# ----- Routes -----
@app.route('/', methods=['GET', 'POST'])
def index():
    result = None
    if request.method == 'POST':
        if 'file' not in request.files:
            return "No file uploaded.", 400

        file = request.files['file']
        if file.filename == '':
            return "No file selected.", 400

        filename = secure_filename(file.filename)
        filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        file.save(filepath)

        static_results = static_analysis(filepath)
        exec_success = execute_sample(filepath)
        behaviors = monitor_behavior() if exec_success else []

        result = {
            'filename': filename,
            'static': static_results,
            'exec_success': exec_success,
            'behavior': behaviors
        }

    return render_template('index.html', result=result)
